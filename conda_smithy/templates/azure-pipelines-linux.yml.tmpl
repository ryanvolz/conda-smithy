# This file was generated automatically from conda-smithy. To update this configuration,
# update the conda-forge.yml and/or the recipe/meta.yaml.
# -*- mode: yaml -*-

jobs:
- job: linux
  {{ azure_yaml|indent(2) }}
  steps:
{%- if clone_depth is not none %}
  - checkout: self
    fetchDepth: {{ clone_depth }}
{%- endif %}
  - script: |
         rm -rf /opt/ghc
         df -h
    displayName: Manage disk space

  # configure qemu binfmt-misc running.  This allows us to run docker containers
  # embedded qemu-static
  - script: |
      docker run --rm --privileged multiarch/qemu-user-static:register --reset --credential yes
      ls /proc/sys/fs/binfmt_misc/
    condition: not(startsWith(variables['CONFIG'], 'linux_64'))
    displayName: Configure binfmt_misc

  - script: |
        export CI=azure
        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME
        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})
{%- if upload_on_branch %}
        export UPLOAD_ON_BRANCH="{{ upload_on_branch }}"
{%- endif %}
{%- if docker.run_args is defined %}
        export CONDA_FORGE_DOCKER_RUN_ARGS="{{ docker.run_args }}"
{%- endif %}
        .scripts/run_docker_build.sh
    displayName: Run docker build
    env:
{%- for secret in secrets %}
      {{ secret }}: $({{ secret }})
{%- endfor %}

{%- if azure.store_build_artifacts %}
  - script: |
        artifact_name="conda_artifacts_$(build.BuildId)_$(CONFIG)"
        if [[ {% raw %}${#artifact_name}{% endraw %} -gt 80 ]]; then
          artifact_name="conda_artifacts_$(build.BuildId)_$(SHORT_CONFIG)"
        fi
        echo "##vso[task.setVariable variable=ARTIFACT_NAME]$artifact_name"
        if [ -d build_artifacts ]; then
          echo "##vso[task.setVariable variable=CONDA_BLD_DIR_EXISTS]true"
          # remove caches to save some artifact space
          rm -rf build_artifacts/git_cache
          rm -rf build_artifacts/pip_cache
          rm -rf build_artifacts/src_cache
          # delete broken symlinks so that artifact publishing doesn't fail
          find build_artifacts -type l -exec test ! -e {} \; -delete
        fi
    displayName: Check for conda build artifacts
    condition: succeededOrFailed()

  - task: PublishPipelineArtifact@1
    displayName: Store conda build artifacts
    condition: eq(variables.CONDA_BLD_DIR_EXISTS, 'true')
    inputs:
      targetPath: build_artifacts/
      artifactName: $(ARTIFACT_NAME)
{%- endif %}
